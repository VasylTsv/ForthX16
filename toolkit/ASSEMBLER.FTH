( Based on FORTH Assembler for 6502 by W. F. Ragsdale July 1, 1980 )

HERE

S" FORTH-65 ASSEMBLER " TYPE
HEX

: CHECK VER 105 < IF ABORT" WRONG INTERPRETER VERSION" THEN ; CHECK FORGET CHECK

: (WORDLIST) CREATE , DOES> @ >R GET-ORDER
    DUP 1 = IF 1+ ELSE NIP THEN
    R> SWAP SET-ORDER ;

WORDLIST (WORDLIST) ASSEMBLER
ONLY FORTH ALSO ASSEMBLER DEFINITIONS

' VER >BODY

( REGISTER ASSIGNMENTS SPECIFIC TO IMPLEMENTATION )
DUP 2+ @
DUP CONSTANT UP        \ "user area"
DUP CONSTANT IP
DUP 2 + CONSTANT W
DUP 8 + CONSTANT DTOP
DUP A + CONSTANT XSAVE
    C + CONSTANT N     \ N-1 through N+7 are usable withing one definition


( NUCLEUS LOCATIONS ARE IMPLEMENTATION SPECIFIC )
DUP 4 + @ CONSTANT NEXT
DUP 6 + @ CONSTANT POP
    8 + @ CONSTANT PUSH
\ SETUP is implemented separately; PUT is too obscure and POPTWO is not very useful

S" ." TYPE

0 BUFFER: INDEX
0909 , 1505 , 0115 , 8011 , 8009 , 1D0D , 8019 , 8080 ,
0080 , 1404 , 8014 , 8080 , 8080 , 1C0C , 801C , 2C80 ,

VARIABLE MODE
: .A 0 MODE ! ;   : # 1 MODE ! ;    : MEM 2 MODE ! ;
: ,X 3 MODE ! ;   : ,Y 4 MODE ! ;   : X) 5 MODE ! ;
: )Y 6 MODE ! ;   : ) F MODE ! ;
MEM

: BOT MEM DTOP ;
\ Original SEC and RP) cannot be implemented as is



S" ." TYPE

: UPMODE IF MODE @ 8 AND 0= IF 8 MODE +! THEN THEN
    1 MODE @ 0F AND ?DUP IF 0 DO DUP + LOOP THEN
    OVER 1+ @ AND 0= ;

: CPU CREATE C, DOES> C@ C, MEM ;
    00 CPU BRK, 18 CPU CLC, D8 CPU CLD, 58 CPU CLI,
    B8 CPU CLV, CA CPU DEX, 88 CPU DEY, E8 CPU INX,
    C8 CPU INY, EA CPU NOP, 48 CPU PHA, 08 CPU PHP,
    68 CPU PLA, 28 CPU PLP, 40 CPU RTI, 60 CPU RTS,
    38 CPU SEC, F8 CPU SED, 78 CPU SEI, AA CPU TAX,
    A8 CPU TAY, BA CPU TSX, 8A CPU TXA, 9A CPU TXS,
    98 CPU TYA, 


S" ." TYPE

: M/CPU CREATE C, , DOES>
    DUP 1+ @ 80 AND IF 10 MODE +! THEN OVER
    FF00 AND UPMODE UPMODE IF ABORT" BAD PARAMS" THEN
    C@ MODE C@
    INDEX + C@ + C, MODE C@ 7 AND IF MODE C@
    0F AND 7 < IF C, ELSE , THEN THEN MEM ;

    1C6E 60 M/CPU ADC, 1C6E 20 M/CPU AND, 1C6E C0 M/CPU CMP,
    1C6E 40 M/CPU EOR, 1C6E A0 M/CPU LDA, 1C6E 00 M/CPU ORA,
    1C6E E0 M/CPU SBC, 1C6C 80 M/CPU STA, 0D0D 01 M/CPU ASL,
    0C0C C1 M/CPU DEC, 0C0C E1 M/CPU INC, 0D0D 41 M/CPU LSR,
    0D0D 21 M/CPU ROL, 0D0D 61 M/CPU ROR, 0414 81 M/CPU STX,
    0486 E0 M/CPU CPX, 0486 C0 M/CPU CPY, 1496 A2 M/CPU LDX,
    0C8E A0 M/CPU LDY, 048C 80 M/CPU STY, 0480 14 M/CPU JSR,
    8480 40 M/CPU JMP, 0484 20 M/CPU BIT, 

S" ." TYPE

: ?PAIRS <> IF ABORT" CONTROL MISMATCH" THEN ;

: BEGIN, HERE 1 ;
: UNTIL, >R 1 ?PAIRS R> C, HERE 1+ - C, ;
: IF, C, HERE 0 C, 2 ;
: THEN, 2 ?PAIRS HERE OVER C@
  IF SWAP ! ELSE OVER 1+ - SWAP C! THEN ;
: ELSE, 2 ?PAIRS HERE 1+ 1 JMP,
   SWAP HERE OVER 1+ - SWAP C! 2 ;
   
\ Original conditions conflicted with standard words, rewrote the section
\ very differently. Note that all opcodes are inverses of their mnemonics
\ as that makes more semantic sense
: COND CREATE C, DOES> C@ ;
    B0 COND BCC:  90 COND BCS:  D0 COND BEQ:  F0 COND BNE:
    10 COND BMI:  30 COND BPL:  70 COND BVC:  50 COND BVS:

S" ." TYPE

HERE
TAY,
BNE: IF,
0 # LDX,
BEGIN,
DTOP LDA, N ,X STA, INX, DTOP 1+ LDA, N ,X STA, INX,
TXA, PHA, TYA, PHA, POP JSR, PLA, TAY, PLA, TAX,
DEY, BEQ: UNTIL,
THEN,
RTS,
CONSTANT SETUP

S" ." TYPE

DECIMAL
: END-CODE 42 <> IF ABORT" MISMATCHED CALL" THEN SET-ORDER ;
FORTH DEFINITIONS
: CODE CREATE -3 ALLOT GET-ORDER 42 ASSEMBLER [ ASSEMBLER ] MEM ;
ONLY

SPACE HERE SWAP - . S" BYTES USED" TYPE CR
